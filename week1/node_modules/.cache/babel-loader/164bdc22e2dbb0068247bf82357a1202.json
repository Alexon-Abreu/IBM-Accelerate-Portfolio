{"ast":null,"code":"var _jsxFileName = \"/Users/alexon/Desktop/IBM-Accelerate-Portfolio/week1/src/component/AddTodo.js\";\nimport React, { Component } from \"react\";\nimport { Button, TextField } from \"@mui/material\"; // This imports Button and TextField from material UI\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass AddTodo extends Component {\n  // A local react state of the this component with a content property set to nothing.\n  constructor() {\n    super();\n\n    this.handleChange = event => {\n      this.setState({\n        content: event.target.value\n      });\n    };\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n\n      if (this.state.content.trim()) {\n        this.props.addTodo(this.state);\n        this.setState({\n          content: \"\"\n        });\n      }\n    };\n\n    this.state = {\n      content: \"\"\n    };\n  } // The handleChange function updates the react state with the new input value provided from the user.\n  // \"event\" is the defined action a user takes. In this case, the event is triggered when the user types something\n  // into the text field.\n\n\n  render() {\n    return (\n      /*#__PURE__*/\n      // 1. The return statement should include a text field input with the handleChange function from above that\n      // is passed into an onChange event.\n      // 2. The return should also include a button with the handleSubmit function from above that is passed into\n      // an OnClick event.\n      // 3. The value of the text field also should reflect the local state of this component.\n      _jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          label: \"Add New Item\",\n          variant: \"outlined\",\n          onChange: this.handleChange,\n          value: this.state.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          style: {\n            marginLeft: \"10px\"\n          },\n          onClick: this.handleSubmit,\n          variant: \"contained\",\n          color: \"primary\",\n          children: \"Add\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this)\n    );\n  }\n\n}\n\nexport default AddTodo;","map":{"version":3,"names":["React","Component","Button","TextField","AddTodo","constructor","handleChange","event","setState","content","target","value","handleSubmit","preventDefault","state","trim","props","addTodo","render","marginLeft"],"sources":["/Users/alexon/Desktop/IBM-Accelerate-Portfolio/week1/src/component/AddTodo.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport { Button, TextField } from \"@mui/material\"; // This imports Button and TextField from material UI\n\nclass AddTodo extends Component {\n    // A local react state of the this component with a content property set to nothing.\n    constructor() {\n      super();\n      this.state = {\n        content: \"\",\n      };\n    }\n    // The handleChange function updates the react state with the new input value provided from the user.\n    // \"event\" is the defined action a user takes. In this case, the event is triggered when the user types something\n    // into the text field.\n    handleChange = (event) => {\n      this.setState({\n        content: event.target.value,\n      });\n    };\n    // The handleSubmit function collects the forms input and puts it into the react state.\n    // event.preventDefault() is called to prevents default event behavior like refreshing the browser.\n    // this.props.addTodo(this.state) passes the current state (or user input) into the addTodo function defined\n    // in the Home.js file which then adds the input into the list.\n    handleSubmit = (event) => {\n      event.preventDefault();\n      if (this.state.content.trim()) {\n        this.props.addTodo(this.state);\n        this.setState({\n          content: \"\",\n        });\n      }\n    };\n    render() {\n      return (\n        // 1. The return statement should include a text field input with the handleChange function from above that\n        // is passed into an onChange event.\n        // 2. The return should also include a button with the handleSubmit function from above that is passed into\n        // an OnClick event.\n        // 3. The value of the text field also should reflect the local state of this component.\n        <div>\n          \n        <TextField\n        label=\"Add New Item\"\n        variant=\"outlined\"\n        onChange={this.handleChange}\n        value={this.state.content}\n      />\n      <Button\n        style={{ marginLeft: \"10px\" }}\n        onClick={this.handleSubmit}\n        variant=\"contained\"\n        color=\"primary\"\n      >\n        Add\n      </Button>\n\n        </div>\n      );\n    }\n  }\n  \n  export default AddTodo;"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,MAAT,EAAiBC,SAAjB,QAAkC,eAAlC,C,CAAmD;;;;AAEnD,MAAMC,OAAN,SAAsBH,SAAtB,CAAgC;EAC5B;EACAI,WAAW,GAAG;IACZ;;IADY,KASdC,YATc,GASEC,KAAD,IAAW;MACxB,KAAKC,QAAL,CAAc;QACZC,OAAO,EAAEF,KAAK,CAACG,MAAN,CAAaC;MADV,CAAd;IAGD,CAba;;IAAA,KAkBdC,YAlBc,GAkBEL,KAAD,IAAW;MACxBA,KAAK,CAACM,cAAN;;MACA,IAAI,KAAKC,KAAL,CAAWL,OAAX,CAAmBM,IAAnB,EAAJ,EAA+B;QAC7B,KAAKC,KAAL,CAAWC,OAAX,CAAmB,KAAKH,KAAxB;QACA,KAAKN,QAAL,CAAc;UACZC,OAAO,EAAE;QADG,CAAd;MAGD;IACF,CA1Ba;;IAEZ,KAAKK,KAAL,GAAa;MACXL,OAAO,EAAE;IADE,CAAb;EAGD,CAP2B,CAQ5B;EACA;EACA;;;EAmBAS,MAAM,GAAG;IACP;MAAA;MACE;MACA;MACA;MACA;MACA;MACA;QAAA,wBAEA,QAAC,SAAD;UACA,KAAK,EAAC,cADN;UAEA,OAAO,EAAC,UAFR;UAGA,QAAQ,EAAE,KAAKZ,YAHf;UAIA,KAAK,EAAE,KAAKQ,KAAL,CAAWL;QAJlB;UAAA;UAAA;UAAA;QAAA,QAFA,eAQF,QAAC,MAAD;UACE,KAAK,EAAE;YAAEU,UAAU,EAAE;UAAd,CADT;UAEE,OAAO,EAAE,KAAKP,YAFhB;UAGE,OAAO,EAAC,WAHV;UAIE,KAAK,EAAC,SAJR;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QARE;MAAA;QAAA;QAAA;QAAA;MAAA;IANF;EAyBD;;AAvD2B;;AA0D9B,eAAeR,OAAf"},"metadata":{},"sourceType":"module"}